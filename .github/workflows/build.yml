# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
##########################################################################
# This workflow will build a Java project with Gradle and
# cache/restore any dependencies to improve the workflow execution time
##########################################################################
name: 'Build and Test'
env:
  TZ: 'America/New_York'
  NODE_ENV: 'production'
  BABEL_ENV: 'production'
  PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GENERATE_SOURCEMAP: ${{ secrets.GENERATE_SOURCEMAP }}
on:
  push:
    branches:
      - '**'
  workflow_call:
    secrets:
      PUBLIC_URL:
        required: true
      GENERATE_SOURCEMAP:
        required: true

  pull_request:
    branches:
      - '**'

#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
#concurrency:
#  group: "pages"
#  cancel-in-progress: false

# Workflow Jobs
jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: build
    steps:
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: 18.x

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd $(find ~+ -type d -name 'SmartScraper');
          npm install;
          npm run build:prod;
        env:
          PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
          GENERATE_SOURCEMAP: ${{ secrets.GENERATE_SOURCEMAP }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository to pages
          path: 'SmartScraper/www'
          # Depending on branch protection rules, a  manually populated
          # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to
          # a protected branch must be used. This secret can have an arbitrary
          # name, as an example, you can use `SOME_RANDOM_TOKEN_STRING`.
          # Since this repository has no protected branches we will omit
          # this part of the step. end
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

