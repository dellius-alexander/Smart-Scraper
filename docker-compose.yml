#############################################################################################################
# Start your application services by typing at the Docker CLI:
# ~$> docker-compose -f <"a unique name">.docker-compose.yml up -d
# Shutdown services with the Docker CLI command:
# ~$> docker-compose -f  <"a unique name">.docker-compose.yml down --remove-orphans
# The "--remove-orphans" flag is used to remove any child container instances that may have been created
# Build, remove orphaned containers and refresh services:
# ~$> docker-compose -f docker-compose.yml up --always-recreate-deps --renew-anon-volumes --remove-orphans --force-recreate -d --build
#############################################################################################################
version: "3.8"
services:
#    swag:
#        image: lscr.io/linuxserver/swag:latest
#        container_name: swag
#        cap_add:
#            - NET_ADMIN
#        environment:
#            - PUID=1000
#            - PGID=1000
#            - TZ=Etc/UTC
#            - URL=delliusalexander.com
#            - VALIDATION=http
#            - SUBDOMAINS=www, #optional
#            - CERTPROVIDER= #optional
#            - DNSPLUGIN=cloudflare #optional
#            - PROPAGATION= #optional
#            - EMAIL=dellius.alexander@gmail.com #optional
#            - ONLY_SUBDOMAINS=false #optional
#            - EXTRA_DOMAINS= #optional
#            - STAGING=false #optional
#        volumes:
#            - ./swag-config:/config
#        ports:
#            - 4433:443
#            - 8080:80 #optional
#        restart: unless-stopped
    ###########################################################################
    # Backend API service
    backend:
        #    image: node:18
        build:  # project contexts imported into Dockerfile at build runtime
            context: .
            dockerfile: .devcontainer/backend.Dockerfile
            args:
                NODE_VERSION: ${NODE_VERSION}
                NODE_ENV: ${NODE_ENV}
                BABEL_ENV: ${BABEL_ENV}
                DOMAIN_BASENAME: ${DOMAIN_BASENAME}
                DOMAIN_NAME: ${DOMAIN_NAME}
                TZ: ${TZ}
                PORT: ${BACKEND_PORT}
                HOSTNAME: ${HOSTNAME}
                USERNAME: ${USERNAME}
                REACT_APP_OPENAI_API_KEY: ${REACT_APP_OPENAI_API_KEY}
                REACT_APP_ORGANIZATION_ID: ${REACT_APP_ORGANIZATION_ID}
                REACT_APP_WOLFRAMALPHA_APPID: ${REACT_APP_WOLFRAMALPHA_APPID}
                UUID: ${UUID}
                HTTPS: ${HTTPS}
        container_name: smart-search-backend
        user: ${USERNAME}
        hostname: ${HOSTNAME}
        working_dir: ${WORKDIR}
        expose:
        - ${BACKEND_PORT}
        ports:
        - ${BACKEND_PORT}:${BACKEND_PORT}
        volumes:
            - ./SmartSearchBackend:/home/${USERNAME}/app
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        networks:
            backend:
    ###########################################################################
    frontend:
        #    image: node:18
        build: # project contexts imported into Dockerfile at build runtime
            context: .
            dockerfile: .devcontainer/frontend.Dockerfile
            args:
                NODE_VERSION: ${NODE_VERSION}
                NODE_ENV: ${NODE_ENV}
                BABEL_ENV: ${BABEL_ENV}
                DOMAIN_BASENAME: ${DOMAIN_BASENAME}
                DOMAIN_NAME: ${DOMAIN_NAME}
                TZ: ${TZ}
                PORT: ${FRONTEND_PORT}
                HOSTNAME: ${HOSTNAME}
                USERNAME: ${USERNAME}
                REACT_APP_OPENAI_API_KEY: ${REACT_APP_OPENAI_API_KEY}
                REACT_APP_ORGANIZATION_ID: ${REACT_APP_ORGANIZATION_ID}
                REACT_APP_WOLFRAMALPHA_APPID: ${REACT_APP_WOLFRAMALPHA_APPID}
                UUID: ${UUID}
                HTTPS: ${HTTPS}
        container_name: smart-search-frontend
        user: ${USERNAME}
        hostname: ${HOSTNAME}
        working_dir: ${WORKDIR}
        expose:
            - ${FRONTEND_PORT}
        ports:
            - ${FRONTEND_PORT}:${FRONTEND_PORT}
        volumes:
            - ./SmartSearchFrontend:/home/${USERNAME}/app
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        networks:
            backend:
        links:
            - backend
###############################################################################
# Define application network
# docker-compose up --always-recreate-deps --renew-anon-volumes --remove-orphans --force-recreate -d --build
networks:
    backend:
        driver: bridge
        ipam:
            driver: default
volumes:
    SmartSearchFrontend: null
    SmartSearchBackend: null